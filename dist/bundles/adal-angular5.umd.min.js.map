{
  "version": 3,
  "file": "adal-angular5.umd.min.js",
  "sources": [
    "ng://adal-angular5/out/src/adal5.service.ts",
    "ng://adal-angular5/out/src/adal5-interceptor.ts",
    "ng://adal-angular5/out/src/adal5-user.ts",
    "ng://adal-angular5/out/src/adal5-http.service.ts",
    "ng://adal-angular5/out/src/adal5-angular.module.ts"
  ],
  "sourcesContent": [
    "import * as adalLib from 'adal-angular';\r\nimport { adal } from 'adal-angular';\r\nimport { Adal5User } from './adal5-user';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs/Rx';\r\n\r\nimport User = adal.User;\r\n\r\n\r\n@Injectable()\r\nexport class Adal5Service {\r\n\r\n\r\n  private adalContext: adal.AuthenticationContext;\r\n\r\n\r\n  private adal5User: Adal5User = {\r\n    authenticated: false,\r\n    username: '',\r\n    error: '',\r\n    token: '',\r\n    profile: {}\r\n  };\r\n\r\n\r\n  constructor() { }\r\n\r\n\r\n  public init(configOptions: adal.Config) {\r\n    if (!configOptions) {\r\n      throw new Error('You must set config, when calling init.');\r\n    }\r\n\r\n    // redirect and logout_redirect are set to current location by default\r\n    const existingHash = window.location.hash;\r\n\r\n    let pathDefault = window.location.href;\r\n    if (existingHash) {\r\n      pathDefault = pathDefault.replace(existingHash, '');\r\n    }\r\n\r\n    configOptions.redirectUri = configOptions.redirectUri || pathDefault;\r\n    configOptions.postLogoutRedirectUri = configOptions.postLogoutRedirectUri || pathDefault;\r\n\r\n    // create instance with given config\r\n    this.adalContext = adalLib.inject(configOptions);\r\n\r\n    (window as any).AuthenticationContext = this.adalContext.constructor;\r\n\r\n    // loginresource is used to set authenticated status\r\n    this.updateDataFromCache(this.adalContext.config.loginResource);\r\n  }\r\n\r\n\r\n  public get config(): adal.Config {\r\n    return this.adalContext.config;\r\n  }\r\n\r\n\r\n  public get userInfo(): Adal5User {\r\n    return this.adal5User;\r\n  }\r\n\r\n\r\n  public login(): void {\r\n    this.adalContext.login();\r\n  }\r\n\r\n\r\n  public loginInProgress(): boolean {\r\n    return this.adalContext.loginInProgress();\r\n  }\r\n\r\n\r\n  public logOut(): void {\r\n    this.adalContext.logOut();\r\n  }\r\n\r\n\r\n  public handleWindowCallback(): void {\r\n    const hash = window.location.hash;\r\n    if (this.adalContext.isCallback(hash)) {\r\n      const requestInfo = this.adalContext.getRequestInfo(hash);\r\n      this.adalContext.saveTokenFromHash(requestInfo);\r\n      if (requestInfo.requestType === this.adalContext.REQUEST_TYPE.LOGIN) {\r\n        this.updateDataFromCache(this.adalContext.config.loginResource);\r\n\r\n      } else if (requestInfo.requestType === this.adalContext.REQUEST_TYPE.RENEW_TOKEN) {\r\n        this.adalContext.callback = (window.parent as any).callBackMappedToRenewStates[requestInfo.stateResponse];\r\n      }\r\n\r\n      if (requestInfo.stateMatch) {\r\n        if (typeof this.adalContext.callback === 'function') {\r\n          if (requestInfo.requestType === this.adalContext.REQUEST_TYPE.RENEW_TOKEN) {\r\n            // Idtoken or Accestoken can be renewed\r\n            if (requestInfo.parameters['access_token']) {\r\n              this.adalContext.callback(this.adalContext._getItem(this.adalContext.CONSTANTS.STORAGE.ERROR_DESCRIPTION)\r\n                , requestInfo.parameters['access_token']);\r\n            } else if (requestInfo.parameters['error']) {\r\n              this.adalContext.callback(this.adalContext._getItem(this.adalContext.CONSTANTS.STORAGE.ERROR_DESCRIPTION), null);\r\n              this.adalContext._renewFailed = true;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // Remove hash from url\r\n    if (window.location.hash) {\r\n      window.location.href = window.location.href.replace(window.location.hash, '');\r\n    }\r\n  }\r\n\r\n\r\n  public getCachedToken(resource: string): string {\r\n    return this.adalContext.getCachedToken(resource);\r\n  }\r\n\r\n\r\n  public acquireToken(resource: string) {\r\n    const _this = this;   // save outer this for inner function\r\n\r\n    let errorMessage: string;\r\n    return Observable.bindCallback(acquireTokenInternal, function (token: string) {\r\n      if (!token && errorMessage) {\r\n        throw (errorMessage);\r\n      }\r\n      return token;\r\n    })();\r\n\r\n    function acquireTokenInternal(cb: any) {\r\n      let s: string = null;\r\n\r\n      _this.adalContext.acquireToken(resource, (error: string, tokenOut: string) => {\r\n        if (error) {\r\n          _this.adalContext.error('Error when acquiring token for resource: ' + resource, error);\r\n          errorMessage = error;\r\n          cb(<string>null);\r\n        } else {\r\n          cb(tokenOut);\r\n          s = tokenOut;\r\n        }\r\n      });\r\n      return s;\r\n    }\r\n  }\r\n\r\n\r\n  public getUser(): Observable<any> {\r\n    return Observable.bindCallback((cb: (u: adal.User) => User) => {\r\n      this.adalContext.getUser(function (error: string, user: adal.User) {\r\n        if (error) {\r\n          this.adalContext.error('Error when getting user', error);\r\n          cb(null);\r\n        } else {\r\n          cb(user);\r\n        }\r\n      });\r\n    })();\r\n  }\r\n\r\n\r\n  public clearCache(): void {\r\n    this.adalContext.clearCache();\r\n  }\r\n\r\n\r\n  public clearCacheForResource(resource: string): void {\r\n    this.adalContext.clearCacheForResource(resource);\r\n  }\r\n\r\n\r\n  public info(message: string): void {\r\n    this.adalContext.info(message);\r\n  }\r\n\r\n\r\n  public verbose(message: string): void {\r\n    this.adalContext.verbose(message);\r\n  }\r\n\r\n\r\n  public GetResourceForEndpoint(url: string): string {\r\n    return this.adalContext.getResourceForEndpoint(url);\r\n  }\r\n\r\n  public refreshDataFromCache() {\r\n    this.updateDataFromCache(this.adalContext.config.loginResource);\r\n  }\r\n\r\n\r\n  private updateDataFromCache(resource: string): void {\r\n    const token = this.adalContext.getCachedToken(resource);\r\n    this.adal5User.authenticated = token !== null && token.length > 0;\r\n    const user = this.adalContext.getCachedUser() || { userName: '', profile: undefined };\r\n    if (user) {\r\n      this.adal5User.username = user.userName;\r\n      this.adal5User.profile = user.profile;\r\n      this.adal5User.token = token;\r\n      this.adal5User.error = this.adalContext.getLoginError();\r\n    } else {\r\n      this.adal5User.username = '';\r\n      this.adal5User.profile = {};\r\n      this.adal5User.token = '';\r\n      this.adal5User.error = '';\r\n    }\r\n  };\r\n}\r\n",
    "import { Injectable } from '@angular/core';\r\nimport { HttpRequest, HttpHandler, HttpEvent, HttpInterceptor } from '@angular/common/http';\r\nimport { Observable } from 'rxjs/Rx';\r\nimport { Adal5Service } from './adal5.service';\r\n\r\n@Injectable()\r\nexport class Adal5Interceptor implements HttpInterceptor {\r\n    constructor(public adal5Service: Adal5Service) { }\r\n    intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n\r\n        request = request.clone({\r\n            setHeaders: {\r\n                Authorization: `Bearer ${this.adal5Service.userInfo.token}`\r\n            }\r\n        });\r\n        return next.handle(request);\r\n    }\r\n}\r\n",
    "export class Adal5User {\r\n    authenticated: boolean;\r\n    username: string;\r\n    error: string;\r\n    profile: any;\r\n    token: string;\r\n}\r\n",
    "import { Observable } from 'rxjs/Rx';\r\nimport { Adal5Service } from './adal5.service';\r\nimport { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\r\n\r\n@Injectable()\r\nexport class Adal5HTTPService {\r\n\r\n  static factory(http: HttpClient, service: Adal5Service) {\r\n    return new Adal5HTTPService(http, service);\r\n  }\r\n\r\n\r\n  constructor(\r\n    private http: HttpClient,\r\n    private service: Adal5Service\r\n  ) { }\r\n\r\n  get(url: string, options: {\r\n    body?: any;\r\n    headers?: HttpHeaders;\r\n    reportProgress?: boolean;\r\n    observe: 'response';\r\n    params?: HttpParams | { [param: string]: string | string[]; };\r\n    responseType?: 'json';\r\n    withCredentials?: boolean;\r\n  }): Observable<any> {\r\n    return this.sendRequest('get', url, options);\r\n  }\r\n\r\n  post(url: string, body: any, options: {\r\n    body?: any;\r\n    headers?: HttpHeaders;\r\n    reportProgress?: boolean;\r\n    observe: 'response';\r\n    params?: HttpParams | { [param: string]: string | string[]; };\r\n    responseType?: 'json';\r\n    withCredentials?: boolean;\r\n  }): Observable<any> {\r\n    options.body = body;\r\n    return this.sendRequest('post', url, options);\r\n  }\r\n\r\n  delete(url: string, options: {\r\n    body?: any;\r\n    headers?: HttpHeaders;\r\n    reportProgress?: boolean;\r\n    observe: 'response';\r\n    params?: HttpParams | { [param: string]: string | string[]; };\r\n    responseType?: 'json';\r\n    withCredentials?: boolean;\r\n  }): Observable<any> {\r\n    return this.sendRequest('delete', url, options);\r\n  }\r\n\r\n  patch(url: string, body: any, options: {\r\n    body?: any;\r\n    headers?: HttpHeaders;\r\n    reportProgress?: boolean;\r\n    observe: 'response';\r\n    params?: HttpParams | { [param: string]: string | string[]; };\r\n    responseType?: 'json';\r\n    withCredentials?: boolean;\r\n  }): Observable<any> {\r\n    options.body = body;\r\n    return this.sendRequest('patch', url, options);\r\n  }\r\n\r\n  put(url: string, body: any, options: {\r\n    body?: any;\r\n    headers?: HttpHeaders;\r\n    reportProgress?: boolean;\r\n    observe: 'response';\r\n    params?: HttpParams | { [param: string]: string | string[]; };\r\n    responseType?: 'json';\r\n    withCredentials?: boolean;\r\n  }): Observable<any> {\r\n    options.body = body;\r\n    return this.sendRequest('put', url, options);\r\n  }\r\n\r\n  head(url: string, options: {\r\n    body?: any;\r\n    headers?: HttpHeaders;\r\n    reportProgress?: boolean;\r\n    observe: 'response';\r\n    params?: HttpParams | { [param: string]: string | string[]; };\r\n    responseType?: 'json';\r\n    withCredentials?: boolean;\r\n  }): Observable<any> {\r\n    return this.sendRequest('head', url, options);\r\n  }\r\n\r\n  private sendRequest(method: string, url: string, options: {\r\n    body?: any;\r\n    headers?: HttpHeaders;\r\n    reportProgress?: boolean;\r\n    observe: 'response';\r\n    params?: HttpParams | { [param: string]: string | string[]; };\r\n    responseType?: 'json';\r\n    withCredentials?: boolean;\r\n  }): Observable<string> {\r\n\r\n    const resource = this.service.GetResourceForEndpoint(url);\r\n    let authenticatedCall: Observable<string>;\r\n    if (resource) {\r\n      if (this.service.userInfo.authenticated) {\r\n        authenticatedCall = this.service.acquireToken(resource)\r\n          .flatMap((token: string) => {\r\n            if (options.headers == null) {\r\n              options.headers = new HttpHeaders();\r\n            }\r\n            options.headers = options.headers.append('Authorization', 'Bearer ' + token);\r\n            return this.http.request(method, url, options)\r\n              .catch(this.handleError);\r\n          });\r\n      } else {\r\n        authenticatedCall = Observable.throw(new Error('User Not Authenticated.'));\r\n      }\r\n    } else {\r\n      authenticatedCall = this.http.request(method, url, options).catch(this.handleError);\r\n    }\r\n\r\n    return authenticatedCall;\r\n  }\r\n\r\n  private handleError(error: any) {\r\n    // In a real world app, we might send the error to remote logging infrastructure\r\n    const errMsg = error.message || 'Server error';\r\n    console.error(JSON.stringify(error)); // log to console instead\r\n\r\n    return Observable.throw(error);\r\n  }\r\n}\r\n",
    "import { Adal5Interceptor } from './adal5-interceptor';\r\nimport { Adal5User } from './adal5-user';\r\nimport { Adal5Service } from './adal5.service';\r\nimport { Adal5HTTPService } from './adal5-http.service';\r\nimport { NgModule } from '@angular/core';\r\nimport { HTTP_INTERCEPTORS } from '@angular/common/http';\r\n\r\n@NgModule({\r\n    imports: [],\r\n    exports: [\r\n        Adal5User, Adal5Service, Adal5HTTPService, Adal5Interceptor\r\n    ],\r\n    providers: [\r\n        { provide: HTTP_INTERCEPTORS, useClass: Adal5Interceptor, multi: true }\r\n    ],\r\n})\r\nexport class Adal5AngularModule { }\r\n"
  ],
  "names": [
    "Adal5Service",
    "this",
    "adal5User",
    "authenticated",
    "username",
    "error",
    "token",
    "profile",
    "prototype",
    "init",
    "configOptions",
    "Error",
    "existingHash",
    "window",
    "location",
    "hash",
    "pathDefault",
    "href",
    "replace",
    "redirectUri",
    "postLogoutRedirectUri",
    "adalContext",
    "adalLib.inject",
    "AuthenticationContext",
    "constructor",
    "updateDataFromCache",
    "config",
    "loginResource",
    "Object",
    "defineProperty",
    "get",
    "login",
    "loginInProgress",
    "logOut",
    "handleWindowCallback",
    "isCallback",
    "requestInfo",
    "getRequestInfo",
    "saveTokenFromHash",
    "requestType",
    "REQUEST_TYPE",
    "LOGIN",
    "RENEW_TOKEN",
    "callback",
    "callBackMappedToRenewStates",
    "stateResponse",
    "stateMatch",
    "parameters",
    "_getItem",
    "CONSTANTS",
    "STORAGE",
    "ERROR_DESCRIPTION",
    "_renewFailed",
    "getCachedToken",
    "resource",
    "acquireToken",
    "errorMessage",
    "_this",
    "Observable",
    "bindCallback",
    "cb",
    "s",
    "tokenOut",
    "getUser",
    "user",
    "clearCache",
    "clearCacheForResource",
    "info",
    "message",
    "verbose",
    "GetResourceForEndpoint",
    "url",
    "getResourceForEndpoint",
    "refreshDataFromCache",
    "length",
    "getCachedUser",
    "userName",
    "undefined",
    "getLoginError",
    "type",
    "Injectable",
    "Adal5Interceptor",
    "adal5Service",
    "intercept",
    "request",
    "next",
    "clone",
    "setHeaders",
    "Authorization",
    "userInfo",
    "handle",
    "Adal5User",
    "Adal5HTTPService",
    "http",
    "service",
    "factory",
    "options",
    "sendRequest",
    "post",
    "body",
    "delete",
    "patch",
    "put",
    "head",
    "method",
    "flatMap",
    "headers",
    "HttpHeaders",
    "append",
    "catch",
    "handleError",
    "throw",
    "console",
    "JSON",
    "stringify",
    "HttpClient",
    "Adal5AngularModule",
    "NgModule",
    "args",
    "imports",
    "exports",
    "providers",
    "provide",
    "HTTP_INTERCEPTORS",
    "useClass",
    "multi"
  ],
  "mappings": "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"
}
