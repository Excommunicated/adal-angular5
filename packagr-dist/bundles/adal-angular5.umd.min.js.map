{
  "version": 3,
  "file": "adal-angular5.umd.min.js",
  "sources": [
    "ng://adal-angular5/out/src/app/adal5-angular/adal5.service.ts",
    "ng://adal-angular5/out/src/app/adal5-angular/adal5-http.service.ts",
    "ng://adal-angular5/out/src/app/adal5-angular/adal5-interceptor.ts",
    "ng://adal-angular5/out/src/app/adal5-angular/adal5-user.ts",
    "ng://adal-angular5/out/src/app/adal5-angular/adal5-angular.module.ts"
  ],
  "sourcesContent": [
    "import { Adal5User } from './adal5-user';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport * as adalLib from 'adal-angular';\r\nimport { adal } from 'adal-angular';\r\nimport User = adal.User;\r\n\r\n\r\n@Injectable()\r\nexport class Adal5Service {\r\n\r\n\r\n    private adalContext: adal.AuthenticationContext;\r\n\r\n\r\n    private adal5User: Adal5User = {\r\n        authenticated: false,\r\n        username: '',\r\n        error: '',\r\n        token: '',\r\n        profile: {}\r\n    };\r\n\r\n\r\n    constructor() { }\r\n\r\n\r\n    public init(configOptions: adal.Config) {\r\n        if (!configOptions) {\r\n            throw new Error('You must set config, when calling init.');\r\n        }\r\n\r\n        // redirect and logout_redirect are set to current location by default\r\n        const existingHash = window.location.hash;\r\n\r\n        let pathDefault = window.location.href;\r\n        if (existingHash) {\r\n            pathDefault = pathDefault.replace(existingHash, '');\r\n        }\r\n\r\n        configOptions.redirectUri = configOptions.redirectUri || pathDefault;\r\n        configOptions.postLogoutRedirectUri = configOptions.postLogoutRedirectUri || pathDefault;\r\n\r\n        // create instance with given config\r\n        this.adalContext = adalLib.inject(configOptions);\r\n\r\n        (window as any).AuthenticationContext = this.adalContext.constructor;\r\n\r\n        // loginresource is used to set authenticated status\r\n        this.updateDataFromCache(this.adalContext.config.loginResource);\r\n    }\r\n\r\n\r\n    public get config(): adal.Config {\r\n        return this.adalContext.config;\r\n    }\r\n\r\n\r\n    public get userInfo(): Adal5User {\r\n        return this.adal5User;\r\n    }\r\n\r\n\r\n    public login(): void {\r\n        this.adalContext.login();\r\n    }\r\n\r\n\r\n    public loginInProgress(): boolean {\r\n        return this.adalContext.loginInProgress();\r\n    }\r\n\r\n\r\n    public logOut(): void {\r\n        this.adalContext.logOut();\r\n    }\r\n\r\n\r\n    public handleWindowCallback(): void {\r\n        const hash = window.location.hash;\r\n        if (this.adalContext.isCallback(hash)) {\r\n\r\n            let context: adal.AuthenticationContext;\r\n\r\n            if (this.adalContext._openedWindows.length > 0\r\n                && this.adalContext._openedWindows[this.adalContext._openedWindows.length - 1].opener\r\n                && this.adalContext._openedWindows[this.adalContext._openedWindows.length - 1].opener._adalInstance) {\r\n                context = this.adalContext._openedWindows[this.adalContext._openedWindows.length - 1].opener._adalInstance;\r\n            } else if (window.parent && window.parent['_adalInstance']) {\r\n                context = window.parent['_adalInstance'];\r\n            } else {\r\n                context = this.adalContext;\r\n            }\r\n\r\n            const requestInfo = context.getRequestInfo(hash);\r\n\r\n            this.adalContext.saveTokenFromHash(requestInfo);\r\n            if (requestInfo.requestType === this.adalContext.REQUEST_TYPE.LOGIN) {\r\n                this.updateDataFromCache(this.adalContext.config.loginResource);\r\n\r\n            } else if (requestInfo.requestType === this.adalContext.REQUEST_TYPE.RENEW_TOKEN) {\r\n                this.adalContext.callback = (window.parent as any).callBackMappedToRenewStates[requestInfo.stateResponse];\r\n            }\r\n\r\n            if (requestInfo.stateMatch) {\r\n                if (typeof this.adalContext.callback === 'function') {\r\n                    if (requestInfo.requestType === this.adalContext.REQUEST_TYPE.RENEW_TOKEN) {\r\n                        // Idtoken or Accestoken can be renewed\r\n                        if (requestInfo.parameters['access_token']) {\r\n                            this.adalContext.callback(this.adalContext._getItem(this.adalContext.CONSTANTS.STORAGE.ERROR_DESCRIPTION)\r\n                                , requestInfo.parameters['access_token']);\r\n                        } else if (requestInfo.parameters['id_token']) {\r\n                            this.adalContext.callback(this.adalContext._getItem(this.adalContext.CONSTANTS.STORAGE.ERROR_DESCRIPTION)\r\n                                , requestInfo.parameters['id_token']);\r\n                        } else if (requestInfo.parameters['error']) {\r\n                            // tslint:disable-next-line:max-line-length\r\n                            this.adalContext.callback(this.adalContext._getItem(this.adalContext.CONSTANTS.STORAGE.ERROR_DESCRIPTION), null);\r\n                            this.adalContext._renewFailed = true;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // Remove hash from url\r\n        if (window.location.hash) {\r\n            window.location.href = window.location.href.replace(window.location.hash, '');\r\n        }\r\n    }\r\n\r\n\r\n    public getCachedToken(resource: string): string {\r\n        return this.adalContext.getCachedToken(resource);\r\n    }\r\n\r\n\r\n    public acquireToken(resource: string) {\r\n        const _this = this;   // save outer this for inner function\r\n\r\n        let errorMessage: string;\r\n        return Observable.bindCallback(acquireTokenInternal, function (token: string) {\r\n            if (!token && errorMessage) {\r\n                throw (errorMessage);\r\n            }\r\n            return token;\r\n        })();\r\n\r\n        function acquireTokenInternal(cb: any) {\r\n            let s: string = null;\r\n\r\n            _this.adalContext.acquireToken(resource, (error: string, tokenOut: string) => {\r\n                if (error) {\r\n                    _this.adalContext.error('Error when acquiring token for resource: ' + resource, error);\r\n                    errorMessage = error;\r\n                    cb(<string>null);\r\n                } else {\r\n                    cb(tokenOut);\r\n                    s = tokenOut;\r\n                }\r\n            });\r\n            return s;\r\n        }\r\n    }\r\n\r\n\r\n    public getUser(): Observable<any> {\r\n        return Observable.bindCallback((cb: (u: adal.User) => User) => {\r\n            this.adalContext.getUser(function (error: string, user: adal.User) {\r\n                if (error) {\r\n                    this.adalContext.error('Error when getting user', error);\r\n                    cb(null);\r\n                } else {\r\n                    cb(user);\r\n                }\r\n            });\r\n        })();\r\n    }\r\n\r\n\r\n    public clearCache(): void {\r\n        this.adalContext.clearCache();\r\n    }\r\n\r\n\r\n    public clearCacheForResource(resource: string): void {\r\n        this.adalContext.clearCacheForResource(resource);\r\n    }\r\n\r\n\r\n    public info(message: string): void {\r\n        this.adalContext.info(message);\r\n    }\r\n\r\n\r\n    public verbose(message: string): void {\r\n        this.adalContext.verbose(message);\r\n    }\r\n\r\n\r\n    public GetResourceForEndpoint(url: string): string {\r\n        return this.adalContext.getResourceForEndpoint(url);\r\n    }\r\n\r\n    public refreshDataFromCache() {\r\n        this.updateDataFromCache(this.adalContext.config.loginResource);\r\n    }\r\n\r\n\r\n    private updateDataFromCache(resource: string): void {\r\n        const token = this.adalContext.getCachedToken(resource);\r\n        this.adal5User.authenticated = token !== null && token.length > 0;\r\n        const user = this.adalContext.getCachedUser() || { userName: '', profile: undefined };\r\n        if (user) {\r\n            this.adal5User.username = user.userName;\r\n            this.adal5User.profile = user.profile;\r\n            this.adal5User.token = token;\r\n            this.adal5User.error = this.adalContext.getLoginError();\r\n        } else {\r\n            this.adal5User.username = '';\r\n            this.adal5User.profile = {};\r\n            this.adal5User.token = '';\r\n            this.adal5User.error = '';\r\n        }\r\n    }\r\n}\r\n",
    "// tslint:disable-next-line:import-blacklist\r\nimport { Observable } from 'rxjs/Rx';\r\nimport { Adal5Service } from './adal5.service';\r\nimport { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\r\n\r\n@Injectable()\r\nexport class Adal5HTTPService {\r\n\r\n    static factory(http: HttpClient, service: Adal5Service) {\r\n        return new Adal5HTTPService(http, service);\r\n    }\r\n\r\n\r\n    constructor(\r\n        private http: HttpClient,\r\n        private service: Adal5Service\r\n    ) { }\r\n\r\n    get(url: string, options?: {\r\n        body?: any;\r\n        headers?: HttpHeaders;\r\n        reportProgress?: boolean;\r\n        observe?: 'response';\r\n        params?: HttpParams | { [param: string]: string | string[]; };\r\n        responseType?: 'json' | 'text' | 'arraybuffer' | 'blob';\r\n        withCredentials?: boolean;\r\n    }): Observable<any> {\r\n        return this.sendRequest('get', url, options);\r\n    }\r\n\r\n    post(url: string, body: any, options?: {\r\n        body?: any;\r\n        headers?: HttpHeaders;\r\n        reportProgress?: boolean;\r\n        observe?: 'response';\r\n        params?: HttpParams | { [param: string]: string | string[]; };\r\n        responseType?: 'json' | 'text' | 'arraybuffer' | 'blob';\r\n        withCredentials?: boolean;\r\n    }): Observable<any> {\r\n        options.body = body;\r\n        return this.sendRequest('post', url, options);\r\n    }\r\n\r\n    delete(url: string, options?: {\r\n        body?: any;\r\n        headers?: HttpHeaders;\r\n        reportProgress?: boolean;\r\n        observe?: 'response';\r\n        params?: HttpParams | { [param: string]: string | string[]; };\r\n        responseType?: 'json' | 'text' | 'arraybuffer' | 'blob';\r\n        withCredentials?: boolean;\r\n    }): Observable<any> {\r\n        return this.sendRequest('delete', url, options);\r\n    }\r\n\r\n    patch(url: string, body: any, options?: {\r\n        body?: any;\r\n        headers?: HttpHeaders;\r\n        reportProgress?: boolean;\r\n        observe?: 'response';\r\n        params?: HttpParams | { [param: string]: string | string[]; };\r\n        responseType?: 'json' | 'text' | 'arraybuffer' | 'blob';\r\n        withCredentials?: boolean;\r\n    }): Observable<any> {\r\n        options.body = body;\r\n        return this.sendRequest('patch', url, options);\r\n    }\r\n\r\n    put(url: string, body: any, options?: {\r\n        body?: any;\r\n        headers?: HttpHeaders;\r\n        reportProgress?: boolean;\r\n        observe?: 'response';\r\n        params?: HttpParams | { [param: string]: string | string[]; };\r\n        responseType?: 'json' | 'text' | 'arraybuffer' | 'blob';\r\n        withCredentials?: boolean;\r\n    }): Observable<any> {\r\n        options.body = body;\r\n        return this.sendRequest('put', url, options);\r\n    }\r\n\r\n    head(url: string, options?: {\r\n        body?: any;\r\n        headers?: HttpHeaders;\r\n        reportProgress?: boolean;\r\n        observe?: 'response';\r\n        params?: HttpParams | { [param: string]: string | string[]; };\r\n        responseType?: 'json' | 'text' | 'arraybuffer' | 'blob';\r\n        withCredentials?: boolean;\r\n    }): Observable<any> {\r\n        return this.sendRequest('head', url, options);\r\n    }\r\n\r\n    private sendRequest(method: string, url: string, options?: {\r\n        body?: any;\r\n        headers?: HttpHeaders;\r\n        reportProgress?: boolean;\r\n        observe?: 'response';\r\n        params?: HttpParams | { [param: string]: string | string[]; };\r\n        responseType?: 'json' | 'text' | 'arraybuffer' | 'blob';\r\n        withCredentials?: boolean;\r\n    }): Observable<string> {\r\n\r\n        if (!options) {\r\n            options = {\r\n                body: null,\r\n                headers: null,\r\n                reportProgress: null,\r\n                observe: 'response',\r\n                params: null,\r\n                responseType: 'json',\r\n                withCredentials: null\r\n            };\r\n        }\r\n\r\n\r\n        const resource = this.service.GetResourceForEndpoint(url);\r\n        let authenticatedCall: Observable<string>;\r\n        if (resource) {\r\n            if (this.service.userInfo.authenticated) {\r\n                authenticatedCall = this.service.acquireToken(resource)\r\n                    .flatMap((token: string) => {\r\n                        if (options.headers == null) {\r\n                            options.headers = new HttpHeaders();\r\n                        }\r\n                        options.headers = options.headers.append('Authorization', 'Bearer ' + token);\r\n                        return this.http.request(method, url, options)\r\n                            .catch(this.handleError);\r\n                    });\r\n            } else {\r\n                authenticatedCall = Observable.throw(new Error('User Not Authenticated.'));\r\n            }\r\n        } else {\r\n            authenticatedCall = this.http.request(method, url, options).catch(this.handleError);\r\n        }\r\n\r\n        return authenticatedCall;\r\n    }\r\n\r\n    private handleError(error: any) {\r\n        // In a real world app, we might send the error to remote logging infrastructure\r\n        const errMsg = error.message || 'Server error';\r\n        console.error(JSON.stringify(error)); // log to console instead\r\n\r\n        return Observable.throw(error);\r\n    }\r\n}\r\n",
    "import { Injectable } from '@angular/core';\r\nimport { HttpRequest, HttpHandler, HttpEvent, HttpInterceptor } from '@angular/common/http';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport { Adal5Service } from './adal5.service';\r\n\r\n@Injectable()\r\nexport class Adal5Interceptor implements HttpInterceptor {\r\n    constructor(public adal5Service: Adal5Service) { }\r\n    intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n\r\n        request = request.clone({\r\n            setHeaders: {\r\n                Authorization: `Bearer ${this.adal5Service.userInfo.token}`\r\n            }\r\n        });\r\n        return next.handle(request);\r\n    }\r\n}\r\n",
    "export class Adal5User {\r\n    authenticated: boolean;\r\n    username: string;\r\n    error: string;\r\n    profile: any;\r\n    token: string;\r\n}\r\n",
    "import { Adal5User } from './adal5-user';\r\nimport { Adal5Service } from './adal5.service';\r\nimport { Adal5Interceptor } from './adal5-interceptor';\r\nimport { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { Adal5HTTPService } from './adal5-http.service';\r\n\r\nexport { Adal5HTTPService } from './adal5-http.service';\r\nexport { Adal5Interceptor } from './adal5-interceptor';\r\nexport { Adal5User } from './adal5-user';\r\nexport { Adal5Service } from './adal5.service';\r\n\r\n@NgModule({\r\n    imports: [CommonModule],\r\n})\r\nexport class Adal5AngularModule { }\r\n"
  ],
  "names": [
    "Adal5Service",
    "this",
    "adal5User",
    "authenticated",
    "username",
    "error",
    "token",
    "profile",
    "prototype",
    "init",
    "configOptions",
    "Error",
    "existingHash",
    "window",
    "location",
    "hash",
    "pathDefault",
    "href",
    "replace",
    "redirectUri",
    "postLogoutRedirectUri",
    "adalContext",
    "adalLib.inject",
    "AuthenticationContext",
    "constructor",
    "updateDataFromCache",
    "config",
    "loginResource",
    "Object",
    "defineProperty",
    "get",
    "login",
    "loginInProgress",
    "logOut",
    "handleWindowCallback",
    "isCallback",
    "requestInfo",
    "_openedWindows",
    "length",
    "opener",
    "_adalInstance",
    "parent",
    "getRequestInfo",
    "saveTokenFromHash",
    "requestType",
    "REQUEST_TYPE",
    "LOGIN",
    "RENEW_TOKEN",
    "callback",
    "callBackMappedToRenewStates",
    "stateResponse",
    "stateMatch",
    "parameters",
    "_getItem",
    "CONSTANTS",
    "STORAGE",
    "ERROR_DESCRIPTION",
    "_renewFailed",
    "getCachedToken",
    "resource",
    "acquireToken",
    "errorMessage",
    "_this",
    "Observable",
    "bindCallback",
    "cb",
    "s",
    "tokenOut",
    "getUser",
    "user",
    "clearCache",
    "clearCacheForResource",
    "info",
    "message",
    "verbose",
    "GetResourceForEndpoint",
    "url",
    "getResourceForEndpoint",
    "refreshDataFromCache",
    "getCachedUser",
    "userName",
    "undefined",
    "getLoginError",
    "type",
    "Injectable",
    "Adal5HTTPService",
    "http",
    "service",
    "factory",
    "options",
    "sendRequest",
    "post",
    "body",
    "delete",
    "patch",
    "put",
    "head",
    "method",
    "headers",
    "reportProgress",
    "observe",
    "params",
    "responseType",
    "withCredentials",
    "userInfo",
    "flatMap",
    "HttpHeaders",
    "append",
    "request",
    "catch",
    "handleError",
    "throw",
    "console",
    "JSON",
    "stringify",
    "HttpClient",
    "Adal5Interceptor",
    "adal5Service",
    "intercept",
    "next",
    "clone",
    "setHeaders",
    "Authorization",
    "handle",
    "Adal5User",
    "Adal5AngularModule",
    "NgModule",
    "args",
    "imports",
    "CommonModule"
  ],
  "mappings": "4gBACA,IAAAA,EAAA,WAuBI,SAAJA,IATAC,KAAAC,WACQC,eAAe,EACfC,SAAU,GACVC,MAAO,GACPC,MAAO,GACPC,mBAOGP,EAAXQ,UAAAC,KAAW,SAAKC,GACR,IAAKA,EACD,MAAM,IAAIC,MAAM,2CAIpB,IAAMC,EAAeC,OAAOC,SAASC,KAEjCC,EAAcH,OAAOC,SAASG,KAC9BL,IACAI,EAAcA,EAAYE,QAAQN,EAAc,KAGpDF,EAAcS,YAAcT,EAAcS,aAAeH,EACzDN,EAAcU,sBAAwBV,EAAcU,uBAAyBJ,EAG7Ef,KAAKoB,YAAcC,EAAAA,OAAeZ,GAElC,OAAgBa,sBAAwBtB,KAAKoB,YAAYG,YAGzDvB,KAAKwB,oBAAoBxB,KAAKoB,YAAYK,OAAOC,gBAIzDC,OAAAC,eAAe7B,EAAfQ,UAAA,UAAAsB,IAAA,WACQ,OAAO7B,KAAKoB,YAAYK,wCAIhCE,OAAAC,eAAe7B,EAAfQ,UAAA,YAAAsB,IAAA,WACQ,OAAO7B,KAAKC,2CAITF,EAAXQ,UAAAuB,MAAW,WACH9B,KAAKoB,YAAYU,SAId/B,EAAXQ,UAAAwB,gBAAW,WACH,OAAO/B,KAAKoB,YAAYW,mBAIrBhC,EAAXQ,UAAAyB,OAAW,WACHhC,KAAKoB,YAAYY,UAIdjC,EAAXQ,UAAA0B,qBAAW,WACH,IAAMnB,EAAOF,OAAOC,SAASC,KAC7B,GAAId,KAAKoB,YAAYc,WAAWpB,GAAO,CAEnC,IAYMqB,GAVuC,EAAzCnC,KAAKoB,YAAYgB,eAAeC,QAC7BrC,KAAKoB,YAAYgB,eAAepC,KAAKoB,YAAYgB,eAAeC,OAAS,GAAGC,QAC5EtC,KAAKoB,YAAYgB,eAAepC,KAAKoB,YAAYgB,eAAeC,OAAS,GAAGC,OAAOC,cAC5EvC,KAAKoB,YAAYgB,eAAepC,KAAKoB,YAAYgB,eAAeC,OAAS,GAAGC,OAAOC,cACtF3B,OAAO4B,QAAU5B,OAAO4B,OAAsB,cAC3C5B,OAAO4B,OAAsB,cAE7BxC,KAAKoB,aAGSqB,eAAe3B,GAE3Cd,KAAKoB,YAAYsB,kBAAkBP,GAC/BA,EAAYQ,cAAgB3C,KAAKoB,YAAYwB,aAAaC,MAC1D7C,KAAKwB,oBAAoBxB,KAAKoB,YAAYK,OAAOC,eAE1CS,EAAYQ,cAAgB3C,KAAKoB,YAAYwB,aAAaE,cACjE9C,KAAKoB,YAAY2B,SAAYnC,OAAoB,OAAEoC,4BAA4Bb,EAAYc,gBAG3Fd,EAAYe,YAC6B,mBAA9BlD,KAAKoB,YAAY2B,UACpBZ,EAAYQ,cAAgB3C,KAAKoB,YAAYwB,aAAaE,cAEtDX,EAAYgB,WAAyB,aACrCnD,KAAKoB,YAAY2B,SAAS/C,KAAKoB,YAAYgC,SAASpD,KAAKoB,YAAYiC,UAAUC,QAAQC,mBACjFpB,EAAYgB,WAAyB,cACpChB,EAAYgB,WAAqB,SACxCnD,KAAKoB,YAAY2B,SAAS/C,KAAKoB,YAAYgC,SAASpD,KAAKoB,YAAYiC,UAAUC,QAAQC,mBACjFpB,EAAYgB,WAAqB,UAChChB,EAAYgB,WAAkB,QAErCnD,KAAKoB,YAAY2B,SAAS/C,KAAKoB,YAAYgC,SAASpD,KAAKoB,YAAYiC,UAAUC,QAAQC,mBAAoB,MAC3GvD,KAAKoB,YAAYoC,cAAe,IAQhD5C,OAAOC,SAASC,OAChBF,OAAOC,SAASG,KAAOJ,OAAOC,SAASG,KAAKC,QAAQL,OAAOC,SAASC,KAAM,MAK3Ef,EAAXQ,UAAAkD,eAAW,SAAeC,GAClB,OAAO1D,KAAKoB,YAAYqC,eAAeC,IAIpC3D,EAAXQ,UAAAoD,aAAW,SAAaD,GAChB,IAEIE,EAFEC,EAAQ7D,KAGd,OAAO8D,EAAAA,WAAWC,aAOlB,SAA8BC,GAC1B,IAAIC,EAAY,KAYhB,OAVAJ,EAAMzC,YAAYuC,aAAaD,EAAU,SAACtD,EAAe8D,GACjD9D,GACAyD,EAAMzC,YAAYhB,MAAM,4CAA8CsD,EAAUtD,GAChFwD,EAAexD,EACf4D,EAAE,QAEFA,EAAGE,GACHD,EAAIC,KAGLD,GApB0C,SAAU5D,GAC3D,IAAKA,GAASuD,EACV,MAAA,EAEJ,OAAOvD,GAJJyD,IAyBJ/D,EAAXQ,UAAA4D,QAAW,WAAA,IAAXN,EAAA7D,KACQ,OAAO8D,EAAAA,WAAWC,aAAa,SAACC,GAC5BH,EAAKzC,YAAY+C,QAAQ,SAAU/D,EAAegE,GAC1ChE,GACAJ,KAAKoB,YAAYhB,MAAM,0BAA2BA,GAClD4D,EAAG,OAEHA,EAAGI,MANRN,IAaJ/D,EAAXQ,UAAA8D,WAAW,WACHrE,KAAKoB,YAAYiD,cAIdtE,EAAXQ,UAAA+D,sBAAW,SAAsBZ,GACzB1D,KAAKoB,YAAYkD,sBAAsBZ,IAIpC3D,EAAXQ,UAAAgE,KAAW,SAAKC,GACRxE,KAAKoB,YAAYmD,KAAKC,IAInBzE,EAAXQ,UAAAkE,QAAW,SAAQD,GACXxE,KAAKoB,YAAYqD,QAAQD,IAItBzE,EAAXQ,UAAAmE,uBAAW,SAAuBC,GAC1B,OAAO3E,KAAKoB,YAAYwD,uBAAuBD,IAG5C5E,EAAXQ,UAAAsE,qBAAW,WACH7E,KAAKwB,oBAAoBxB,KAAKoB,YAAYK,OAAOC,gBAI7C3B,EAAZQ,UAAAiB,oBAAY,SAAoBkC,GACxB,IAAMrD,EAAQL,KAAKoB,YAAYqC,eAAeC,GAC9C1D,KAAKC,UAAUC,cAA0B,OAAVG,GAAiC,EAAfA,EAAMgC,OACvD,IAAM+B,EAAOpE,KAAKoB,YAAY0D,kBAAqBC,SAAU,GAAIzE,QAAS0E,WACtEZ,GACApE,KAAKC,UAAUE,SAAWiE,EAAKW,SAC/B/E,KAAKC,UAAUK,QAAU8D,EAAK9D,QAC9BN,KAAKC,UAAUI,MAAQA,EACvBL,KAAKC,UAAUG,MAAQJ,KAAKoB,YAAY6D,kBAExCjF,KAAKC,UAAUE,SAAW,GAC1BH,KAAKC,UAAUK,WACfN,KAAKC,UAAUI,MAAQ,GACvBL,KAAKC,UAAUG,MAAQ,OA5NnC,kBAOA8E,KAACC,EAAAA,mDCPD,IAAAC,EAAA,WAaI,SAAJA,EACgBC,EACAC,GADAtF,KAAhBqF,KAAgBA,EACArF,KAAhBsF,QAAgBA,SAPLF,EAAXG,QAAI,SAAeF,EAAkBC,GAC7B,OAAO,IAAIF,EAAiBC,EAAMC,IAStCF,EAAJ7E,UAAAsB,IAAI,SAAI8C,EAAaa,GASb,OAAOxF,KAAKyF,YAAY,MAAOd,EAAKa,IAGxCJ,EAAJ7E,UAAAmF,KAAI,SAAKf,EAAagB,EAAWH,GAUzB,OADAA,EAAQG,KAAOA,EACR3F,KAAKyF,YAAY,OAAQd,EAAKa,IAGzCJ,EAAJ7E,UAAAqF,UAAI,SAAOjB,EAAaa,GAShB,OAAOxF,KAAKyF,YAAY,SAAUd,EAAKa,IAG3CJ,EAAJ7E,UAAAsF,MAAI,SAAMlB,EAAagB,EAAWH,GAU1B,OADAA,EAAQG,KAAOA,EACR3F,KAAKyF,YAAY,QAASd,EAAKa,IAG1CJ,EAAJ7E,UAAAuF,IAAI,SAAInB,EAAagB,EAAWH,GAUxB,OADAA,EAAQG,KAAOA,EACR3F,KAAKyF,YAAY,MAAOd,EAAKa,IAGxCJ,EAAJ7E,UAAAwF,KAAI,SAAKpB,EAAaa,GASd,OAAOxF,KAAKyF,YAAY,OAAQd,EAAKa,IAGjCJ,EAAZ7E,UAAAkF,YAAY,SAAYO,EAAgBrB,EAAaa,GAAzC,IAAZ3B,EAAA7D,KAUawF,IACDA,GACIG,KAAM,KACNM,QAAS,KACTC,eAAgB,KAChBC,QAAS,WACTC,OAAQ,KACRC,aAAc,OACdC,gBAAiB,OAKzB,IAAM5C,EAAW1D,KAAKsF,QAAQZ,uBAAuBC,GAoBrD,OAlBIjB,EACI1D,KAAKsF,QAAQiB,SAASrG,cACFF,KAAKsF,QAAQ3B,aAAaD,GACzC8C,QAAQ,SAACnG,GAKN,OAJuB,MAAnBmF,EAAQS,UACRT,EAAQS,QAAU,IAAIQ,EAAAA,aAE1BjB,EAAQS,QAAUT,EAAQS,QAAQS,OAAO,gBAAiB,UAAYrG,GAC/DwD,EAAKwB,KAAKsB,QAAQX,EAAQrB,EAAKa,GACjCoB,SAAM/C,EAAKgD,eAGJ/C,EAAAA,WAAWgD,SAAM,IAAIpG,MAAM,4BAG/BV,KAAKqF,KAAKsB,QAAQX,EAAQrB,EAAKa,GAASoB,SAAM5G,KAAK6G,cAMvEzB,EAAZ7E,UAAAsG,YAAY,SAAYzG,GAEDA,EAAMoE,QAGrB,OAFAuC,QAAQ3G,MAAM4G,KAAKC,UAAU7G,IAEtB0D,EAAAA,WAAWgD,SAAM1G,MAhJhC,kBAKA8E,KAACC,EAAAA,iDAFDD,KAASgC,EAAAA,aAFThC,KAASnF,KCFT,IAAAoH,EAAA,WAOI,SAAJA,EAAuBC,GAAApH,KAAvBoH,aAAuBA,SACnBD,EAAJ5G,UAAA8G,UAAI,SAAUV,EAA2BW,GAOjC,OALAX,EAAUA,EAAQY,OACdC,YACIC,cAAe,UAAUzH,KAAKoH,aAAab,SAASlG,SAGrDiH,EAAKI,OAAOf,MAf3B,kBAKAzB,KAACC,EAAAA,iDAFDD,KAASnF,KCHT,IAAA4H,EAAA,aCGAC,EAAA,4BASA1C,KAAC2C,EAAAA,SAADC,OACIC,SAAUC,EAAAA"
}
